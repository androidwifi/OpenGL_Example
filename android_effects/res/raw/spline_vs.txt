
uniform mat4 uModelViewProjectionM;
uniform vec3 uCtrl[4];

attribute vec2 aPosition;

varying vec2 vPosition;

void main() {
	vec3 q0 = mix(uCtrl[0], uCtrl[1], aPosition.x);
	vec3 q1 = mix(uCtrl[1], uCtrl[2], aPosition.x);
	vec3 q2 = mix(uCtrl[2], uCtrl[3], aPosition.x);
	vec3 r0 = mix(q0, q1, aPosition.x);
	vec3 r1 = mix(q1, q2, aPosition.x);
	vec4 s0 = uModelViewProjectionM * vec4(r0, 1.0);
	vec4 s1 = uModelViewProjectionM * vec4(r1, 1.0);
	vec3 t0 = s0.xyz / s0.w;
	vec3 t1 = s1.xyz / s1.w;
	
	vec3 pos = mix(t0, t1, aPosition.x);
	
	vec2 normal = t0.xy - t1.xy;
	normal = normalize(vec2(-normal.y, normal.x));
	pos.xy += aPosition.y * normal * (1.0 - pos.z) * 0.1;
	
	gl_Position = vec4(pos, 1.0);
	
	if (pos.z < 0.1) {
		gl_Position.xy = vec2(100.0);
	}
	
	vPosition = aPosition;
}
