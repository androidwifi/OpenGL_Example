		precision mediump float;//设置精度
		uniform mat4 uMVPMatrix; //总变换矩阵
		uniform mat4 uMMatrix; //变换矩阵
		uniform vec3 uLightLocation;	//光源位置
		uniform vec3 uCamera;	//摄像机位置
		attribute vec3 aPosition;  //顶点位置
		attribute vec3 aNormal;    //顶点法向量
		attribute vec2 aTexCoor;    //顶点纹理坐标
		varying vec4 ambient;//环境光
		varying vec4 diffuse;//散射光
		varying vec4 specular;//镜面光
		varying vec2 vTextureCoord;  //纹理坐标
		varying vec3 vpos;//当前顶点坐标
		//定位光光照计算的方法
		void pointLight(				//定位光光照计算的方法
			in vec3 normal,				//法向量
			inout vec4 ambient,			//环境光最终强度
			inout vec4 diffuse,			//散射光最终强度
			inout vec4 specular,			//镜面光最终强度
			in vec3 lightLocation,			//光源位置
			in vec4 lightAmbient,			//环境光强度
			in vec4 lightDiffuse,			//散射光强度
			in vec4 lightSpecular			//镜面光强度
		){
			ambient=lightAmbient;			//直接得出环境光的最终强度  
			vec3 normalTarget=aPosition+normal;	//计算变换后的法向量
			vec3 newNormal=(uMMatrix*vec4(normalTarget,1)).xyz-(uMMatrix*vec4(aPosition,1)).xyz;
			newNormal=normalize(newNormal); 	//对法向量规格化
			
			//计算从表面点到摄像机的向量
			vec3 eye= normalize(uCamera-(uMMatrix*vec4(aPosition,1)).xyz);  
			//计算从表面点到光源位置的向量vp
			vec3 vp= normalize(lightLocation-(uMMatrix*vec4(aPosition,1)).xyz);  
			vp=normalize(vp);//格式化vp
			vec3 halfVector=normalize(vp+eye);	//求视线与光线的半向量    
			float shininess=50.0;			//粗糙度，越小越光滑
			//求法向量与vp的点积与0的最大值
			float nDotViewPosition=max(0.0,dot(newNormal,vp)); 	
			diffuse=lightDiffuse*nDotViewPosition;	//计算散射光的最终强度
			float nDotViewHalfVector=dot(newNormal,halfVector);//法线与半向量的点积 
			//镜面反射光强度因子
			float powerFactor=max(0.0,pow(nDotViewHalfVector,shininess)); 	
			specular=lightSpecular*powerFactor;   //计算镜面光的最终强度
		}
		void main()     
		{ 
			//根据总变换矩阵计算此次绘制此顶点位置
			gl_Position = uMVPMatrix * vec4(aPosition,1);   
			vpos = aPosition;//将当前顶点位置传递给片元着色器
			//存放环境光、散射光、镜面反射光的临时变量
			vec4 ambientTemp, diffuseTemp, specularTemp;    
			//计算光照
			pointLight(normalize(aNormal),ambientTemp,diffuseTemp,specularTemp,uLightLocation,
				vec4(0.4,0.4,0.4,1.0),vec4(1.0,1.0,1.0,1.0),vec4(0.4,0.4,0.4,1.0));
			ambient=ambientTemp;//将环境光传入片元着色器
			diffuse=diffuseTemp;//将散射光传入片元着色器
			specular=specularTemp;//将镜面光传入片元着色器
			vTextureCoord = aTexCoor;//将接收的纹理坐标传递给片元着色器
		} 
		
		<#BREAK_BN#>
		
		precision mediump float;//设定精度
		uniform sampler2D sTexture;//纹理内容数据
		//接收从顶点着色器过来的参数
		varying vec4 ambient;//从顶点着色程序接收的环境光强度
		varying vec4 diffuse;//从顶点着色程序接收的散射光强度
		varying vec4 specular;//从顶点着色程序接收的镜面光强度
		varying vec2 vTextureCoord;//从顶点着色程序接收的纹理坐标
		varying vec3 vpos;//从顶点着色程序接收的顶点位置

		void main()                         
		{//主函数    
			vec4 finalColor=texture2D(sTexture, vTextureCoord);//将计算出的颜色给此片元   
			//给此片元颜色值
			gl_FragColor = finalColor*ambient+finalColor*specular+finalColor*diffuse;		
		} 


		